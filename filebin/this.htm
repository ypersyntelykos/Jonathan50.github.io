<!DOCTYPE html>
<html><head><meta charset="utf8"><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({QJf3ax:[function(e,t){function n(){}function r(e){function t(e){return e&&e instanceof n?e:e?a(e,i,o):o()}function s(n,r,o){e&&e(n,r,o);for(var i=t(o),a=l(n),u=a.length,f=0;u>f;f++)a[f].apply(i,r);var s=c[w[n]];return s&&s.push([h,n,r,i]),i}function p(e,t){g[e]=l(e).concat(t)}function l(e){return g[e]||[]}function d(e){return f[e]=f[e]||r(s)}function v(e,t){u(e,function(e,n){t=t||"feature",w[n]=t,t in c||(c[t]=[])})}var g={},w={},h={on:p,emit:s,get:d,listeners:l,context:t,buffer:v};return h}function o(){return new n}var i="nr@context",a=e("gos"),u=e(1),c={},f={},s=t.exports=r();s.backlog=c},{1:12,gos:"7eSDFh"}],ee:[function(e,t){t.exports=e("QJf3ax")},{}],3:[function(e,t){function n(e,t){return function(){r(e,[(new Date).getTime()].concat(i(arguments)),null,t)}}var r=e("handle"),o=e(1),i=e(2);"undefined"==typeof window.newrelic&&(newrelic=NREUM);var a=["setPageViewName","addPageAction","setCustomAttribute","finished","addToTrace","inlineHit"],u=["addPageAction"],c="api-";o(a,function(e,t){newrelic[t]=n(c+t,"api")}),o(u,function(e,t){newrelic[t]=n(c+t)}),t.exports=newrelic,newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),r("err",[e,(new Date).getTime()])}},{1:12,2:13,handle:"D5DuLP"}],gos:[function(e,t){t.exports=e("7eSDFh")},{}],"7eSDFh":[function(e,t){function n(e,t,n){if(r.call(e,t))return e[t];var o=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:o,writable:!0,enumerable:!1}),o}catch(i){}return e[t]=o,o}var r=Object.prototype.hasOwnProperty;t.exports=n},{}],handle:[function(e,t){t.exports=e("D5DuLP")},{}],D5DuLP:[function(e,t){function n(e,t,n,o){r.buffer([e],o),r.emit(e,t,n)}var r=e("ee").get("handle");t.exports=n,n.ee=r},{ee:"QJf3ax"}],XL7HBI:[function(e,t){function n(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:i(e,o,function(){return r++})}var r=1,o="nr@id",i=e("gos");t.exports=n},{gos:"7eSDFh"}],id:[function(e,t){t.exports=e("XL7HBI")},{}],G9z0Bl:[function(e,t){function n(){if(!v++){var e=d.info=NREUM.info,t=f.getElementsByTagName("script")[0];if(e&&e.licenseKey&&e.applicationID&&t){u(p,function(t,n){e[t]||(e[t]=n)});var n="https"===s.split(":")[0]||e.sslForHttp;d.proto=n?"https://":"http://",a("mark",["onload",i()],null,"api");var r=f.createElement("script");r.src=d.proto+e.agent,t.parentNode.insertBefore(r,t)}}}function r(){"complete"===f.readyState&&o()}function o(){a("mark",["domContent",i()],null,"api")}function i(){return(new Date).getTime()}var a=e("handle"),u=e(1),c=window,f=c.document;NREUM.o={ST:setTimeout,XHR:c.XMLHttpRequest,REQ:c.Request,EV:c.Event,PR:c.Promise,MO:c.MutationObserver},e(2);var s=(""+location).split("?")[0],p={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-885.min.js"},l=window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&!/CriOS/.test(navigator.userAgent),d=t.exports={offset:i(),origin:s,features:{},xhrWrappable:l};f.addEventListener?(f.addEventListener("DOMContentLoaded",o,!1),c.addEventListener("load",n,!1)):(f.attachEvent("onreadystatechange",r),c.attachEvent("onload",n)),a("mark",["firstbyte",i()],null,"api");var v=0},{1:12,2:3,handle:"D5DuLP"}],loader:[function(e,t){t.exports=e("G9z0Bl")},{}],12:[function(e,t){function n(e,t){var n=[],o="",i=0;for(o in e)r.call(e,o)&&(n[i]=t(o,e[o]),i+=1);return n}var r=Object.prototype.hasOwnProperty;t.exports=n},{}],13:[function(e,t){function n(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(0>o?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=n},{}]},{},["G9z0Bl"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","queueTime":0,"licenseKey":"1c6ed9743c","agent":"","transactionName":"M1IHN0NYXEZWAEFRCgoYIxZfWkZcWA0aXA8FWQIMU1ttU1gRQFVLEl4AFEIDQlpEF2pIFwFBDAZG","applicationID":"2845391","errorBeacon":"bam.nr-data.net","applicationTime":73}</script>
<link href="https://cdn.scratch.mit.edu/scratchr2/static/__3e6a9ef6e3997fdf1c29222cb791be31__//djangobb_forum/themes/base.css" rel="stylesheet">
<link href="https://cdn.scratch.mit.edu/scratchr2/static/__3e6a9ef6e3997fdf1c29222cb791be31__//djangobb_forum/themes/scratch_default_theme_copy/style.css" rel="stylesheet">
<link href="https://cdn.scratch.mit.edu/scratchr2/static/__3e6a9ef6e3997fdf1c29222cb791be31__//djangobb_forum/themes/scratch_default_theme_copy/css/default_cs.css" rel="stylesheet">
<link rel="stylesheet" type="text/css" href="https://cdn.scratch.mit.edu/scratchr2/static/__3e6a9ef6e3997fdf1c29222cb791be31__//djangobb_forum/css/pygments.css">
<link rel="stylesheet" type="text/css" href="https://cdn.scratch.mit.edu/scratchr2/static/__3e6a9ef6e3997fdf1c29222cb791be31__//djangobb_forum/scratchblocks2/scratchblocks2.css">
<style>
body {
    color: #211922;
    font: 13px "Helvetica Neue", Arial, sans-serif;
    margin: 12px 20px;
}
a {
    color: #1AA0D8;
    text-decoration: none;
    text-shadow: none;
}
a:hover, a:active {
    color: #1AA0D8;
    text-decoration: underline;
}
</style>
</head>
<body class="djangobb">
<div class="postmsg">
<div class="post_body_html">I've decided to make this <a href="https://en.wikipedia.org/wiki/Special:Search?search=code+golf">code golf</a>:<br><blockquote><span class="bb-bold">The challenge:</span><br>Make a tiny interpreter (or compiler!) for a Lisp-like language.</blockquote><blockquote><span class="bb-bold">Rules:</span><br><ul><li> You must not use ‘eval’ or equivilant if the language you are writing in <span class="bb-italic">is itself</span> a Lisp-like language.<br></li><li> You must provide <span class="bb-italic">at least</span> these functions: ‘cons’, ‘car’, ‘cdr’, ‘cadr’, ‘+’, ‘-’, ‘*’, and ‘print’ (print a value and a newline).<br>'cons' must take exactly two arguments. ‘car’ and ‘cdr’ should take exactly one, and ‘-’ exactly two.<br>'+' and ‘*’ must be able to take two arguments. It is not required that they can take more, but you can if you like.<br></li><li> You must not require the user to input anything more than their code. For example you can't make a ‘compiler’ that asks the user to input the output assembly.<br></li><li> You must make a REPL (Read-Evaluate-Print-Loop) if interpreting, or read source from stdin (with the exception of languages that don't have stdout) if compiling.<br></li><li> It must use the <a href="https://en.wikipedia.org/wiki/Special:Search?search=S-expression">S-expression</a> syntax.<br></li><li> It must ignore unnecessary whitespace. (For simplicity, tabs aren't counted as whitespace, programs with tabs may have undefined behaviour.)<br></li><li> The test program below must work as expected.<br></li><li> It must be able to work with arbitrary input. Testing for the test program is not allowed.<br></li><li> It must support at least integers and lists.<br></li></ul></blockquote><blockquote><span class="bb-bold">Scoring:</span><br>Each byte of the program's source code (or, in Scratch or Snap<span class="bb-italic">!</span>, the amount of bytes of the minimum scratchblocks2 source without ‘::’ parts) adds a point to your score.<br>Code that imports GNU Readline, Editline, or a compatible library, does not count points.<br>Each newline only counts one point, regaurdless of whether it is a LF, CR, or CRLF.<br>The entry with the <span class="bb-italic">lowest</span> points wins.</blockquote><blockquote><span class="bb-bold">Test program:</span><br><div class="code"><pre><span class="p">(</span><span class="nb">print</span> <span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)))</span>
<span class="p">(</span><span class="nb">print</span> <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">cons</span> <span class="mi">1</span> <span class="no">nil</span><span class="p">)))</span>
<span class="p">(</span><span class="nb">print</span> <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nb">cons</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">cons</span> <span class="mi">2</span> <span class="p">(</span><span class="nb">cons</span> <span class="mi">3</span> <span class="no">nil</span><span class="p">))))))</span>
<span class="p">(</span><span class="nb">print</span> <span class="p">(</span><span class="nb">cadr</span> <span class="p">(</span><span class="nb">cons</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">cons</span> <span class="mi">2</span> <span class="no">nil</span><span class="p">))))</span>
</pre></div>The first line should output 6.<br>The second should output 1.<br>The third and fourth should both output 2.</blockquote><blockquote><span class="bb-bold">Hints/tips:</span><br><ul><li> In Python, remember you can use a hard tab character instead of four spaces.<br></li><li> Avoid unnecessary whitespace.<br></li><li> What can you do with ‘eval’ and ‘replace’?<br></li><li> Use short variable/procedure names. Avoid using underscores in names. (fooBar or foobar is shorter than foo_bar.)<br></li><li> Is there a shorter way to do something?<br></li><li> Implementing a way to define functions, or lambda, or variables, or comments, won't be necessary. Just what is specified in the rules.<br></li><li> Objective-C(++)'s ‘#import’ is shorter than ‘#include’! And, since Objective-C is 100% backwards-compatible with C (and Objective-C++ with C++), maybe you could make your C(++) program into an Objective-C(++) program?<br></li><li> In JavaScript, 'foo=<span class="bb-bold"></span>()=&gt;{}' is much shorter than ‘function foo(){}’.<br></li><li> Remember LISP code is basically lists of lists.<br></li></ul></blockquote>Good luck, and enjoy! <img src="https://cdn.scratch.mit.edu/scratchr2/static/__3e6a9ef6e3997fdf1c29222cb791be31__/djangobb_forum/img/smilies/big_smile.png"><br>(PS: it's not as hard as it sounds. Don't worry about being ‘correct’ very much.)</div>
</div>
<script type="text/javascript" src="https://cdn.scratch.mit.edu/scratchr2/static/__3e6a9ef6e3997fdf1c29222cb791be31__//js/jquery.min.js"></script> 

<script type="text/javascript" src="https://cdn.scratch.mit.edu/scratchr2/static/__3e6a9ef6e3997fdf1c29222cb791be31__//djangobb_forum/scratchblocks2/scratchblocks2.js"></script>
<script type="text/javascript" src="https://cdn.scratch.mit.edu/scratchr2/static/__3e6a9ef6e3997fdf1c29222cb791be31__//djangobb_forum/scratchblocks2/translations.js" charset="utf-8"></script>
<script type="text/javascript">
(function ($) {
    var forum_langs = {13: "de", 14: "es", 15: "fr", 16: "zh_CN", 17: "pl",
        18: "ja", 19: "nl", 20: "pt", 21: "it", 22: "he", 23: "ko", 24: "nb",
        25: "tr", 26: "el", 27: "ru", 33: "ca", 36: "id"};

    function match_path(path) {
        return new RegExp("^/discuss/([0-9]+)/").exec(path);
    }

    var match = match_path(window.location.pathname);
    if (!match) {
        var links = $(".linkst ul a");
        for (var i=0; i<links.length; i++) {
            match = match_path($(links[i]).attr("href"));
            if (match) break;
        }
    }
    if (!match) return;
    var forum_id = parseInt(match[1]);
    var code = forum_langs[forum_id];

    if (code in scratchblocks2._translations) {
        scratchblocks2.load_language(scratchblocks2._translations[code]);
    }
})(jQuery);

scratchblocks2.parse('pre.blocks');
</script>


</body></html>
